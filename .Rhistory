aes(x=horizon, y = `IRF s2`),  size = 2.5,
shape = 24, fill = 'GREY50') +
scale_x_continuous(name = "",breaks=seq(0,18,1),
) +
labs(title = '') +
guides()  +
ylab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
plot.margin=grid::unit(c(0,-2,0,-5), "mm"),
plot.title = ggtext::element_markdown(size = 9, colour = 'black'),
axis.text.x = element_text(angle = 45,
vjust = 0.6,
hjust = 0.6,
size=11,
colour = 'black'),
axis.text.y = element_text(size=11,colour = 'black'))
ggplot(IRF_df)  +
geom_ribbon(aes(x=0:18, ymin=`IRF_lower s1`, ymax =`IRF_upper s1`),
fill = "indianred", alpha = 0.3) +
geom_line(aes(x=horizon, y=`IRF_lower s2`),color = "GREY50", alpha =  1, show.legend = F, size = 1) +
geom_line(aes(x=horizon, y=`IRF_upper s2`),color = "GREY50", alpha =  1, show.legend = F, size = 1) +
geom_hline(yintercept = 0, colour= 'darkgrey', linetype = 'dashed') +
geom_line(aes(x=horizon, y=`IRF s1`), color = 'indianred',linetype = 'dashed',size = 1) +
geom_line(aes(x=horizon, y=`IRF s2`), color = 'GREY10', linetype = 'solid' , size = 1) +
geom_point(data = IRF_df %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1),
aes(x=horizon, y = `IRF s1`),  size = 3,
shape = 24, fill = 'indianred') +
geom_point(data = IRF_df %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1),
aes(x=horizon, y = `IRF s2`),  size = 3,
shape = 24, fill = 'GREY50') +
scale_x_continuous(name = "",breaks=seq(0,18,1),
) +
labs(title = '') +
guides()  +
ylab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
plot.margin=grid::unit(c(0,-2,0,-5), "mm"),
plot.title = ggtext::element_markdown(size = 9, colour = 'black'),
axis.text.x = element_text(angle = 45,
vjust = 0.6,
hjust = 0.6,
size=11,
colour = 'black'),
axis.text.y = element_text(size=11,colour = 'black'))
df
# Criando dataframe dos dados
# tryCatch é usado para evitar uma mensagem chata de "New names"
tryCatch(expr = {df <- suppressMessages(
as_tibble(bind_cols(results_nl$fz,date),
.name_repair = ~vctrs::vec_as_names(c('transition_function',
'date'),
repair = "unique",
quiet = TRUE)))},
error = function(error_in_function){
message("Error in tibble!")
print(error_in_function)
}
)
transition_function <- as.xts(ts(results_nl$fz,
start = c(2000,2),
end = c(2020,1),
frequency = 12))
date <- time(transition_function)
if ( (transition_function['2002:8'] < 0.2) &&
(transition_function['2002:9'] < 0.2) &&
(transition_function['2002:10'] < 0.2)) {
regime_1 = 'Regime de Depreciação'
regime_2 = 'Regime de Apreciação'
} else {
regime_1 = 'Regime de Apreciação'
regime_2 = 'Regime de Depreciação'
}
date <- date[(max(c(lag_endog,lag_exog))):(length(date)-1)]
# Criando dataframe dos dados
# tryCatch é usado para evitar uma mensagem chata de "New names"
tryCatch(expr = {df <- suppressMessages(
as_tibble(bind_cols(results_nl$fz,date),
.name_repair = ~vctrs::vec_as_names(c('transition_function',
'date'),
repair = "unique",
quiet = TRUE)))},
error = function(error_in_function){
message("Error in tibble!")
print(error_in_function)
}
)
df
# Plotando o gráfico da função de transição
ggplot(df)  +
geom_line(aes(x=date, y=transition_function),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,0.5),
labels=paste0(c("Jan ",'Jun '),
c(rep(2000:2019,each=2),2020)),
expand = c(0, 0)) +
labs(title = paste0('Função de Transição - ',
regime_2,
' - gamma = ',
as.character(gamma_transition))) +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,face = 'bold'))
# Plotando o gráfico da função de transição
ggplot(df)  +
geom_line(aes(x=date, y=transition_function),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0, 0)) +
labs(title = '') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,face = 'bold'))
# Plotando o gráfico da função de transição
ggplot(df)  +
geom_line(aes(x=date, y=transition_function),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.1, 0)) +
labs(title = '') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,face = 'bold'))
# Plotando o gráfico da função de transição
ggplot(df)  +
geom_line(aes(x=date, y=transition_function),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.01, 0)) +
labs(title = '') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,face = 'bold'))
# Regime 1 é a probabilidade de (1 - evento da variável de transição).
# Regime 2 é a probabilidade do evento da variável de transição.
plot_transition_function <- function(results_nl,specs) {
transition_function <- as.xts(ts(results_nl$fz,
start = c(2000,2),
end = c(2020,1),
frequency = 12))
date <- time(transition_function)
if ( (transition_function['2002:8'] < 0.2) &&
(transition_function['2002:9'] < 0.2) &&
(transition_function['2002:10'] < 0.2)) {
regime_1 = 'Regime de Depreciação'
regime_2 = 'Regime de Apreciação'
} else {
regime_1 = 'Regime de Apreciação'
regime_2 = 'Regime de Depreciação'
}
date <- date[(max(c(lag_endog,lag_exog))):(length(date)-1)]
# Criando dataframe dos dados
# tryCatch é usado para evitar uma mensagem chata de "New names"
tryCatch(expr = {df <- suppressMessages(
as_tibble(bind_cols(results_nl$fz,date),
.name_repair = ~vctrs::vec_as_names(c('transition_function',
'date'),
repair = "unique",
quiet = TRUE)))},
error = function(error_in_function){
message("Error in tibble!")
print(error_in_function)
}
)
df
# Plotando o gráfico da função de transição
ggplot(df)  +
geom_line(aes(x=date, y=transition_function),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.01, 0)) +
labs(title = '') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,face = 'bold'))
ggsave(paste0('Função de Transição - ',
regime_2,
' - gamma = ',
as.character(gamma_transition)),
path = file.path('Output/Figures/'),
device = "png",width = 12, height = 8, units = "cm",scale = 2.5)
# End function
return(list(regime_1 = regime_1,regime_2 = regime_2))
}
# Funções de Impulso Resposta com 5 variáveis endógenas (5 gráficos de IRFs) ####
plot_IRFs <- function(results_nl,specs) {
# Elabora os 5 gráficos das IRF's
#---------------------------------------------------------------------#
#                                                                     #
#                     Funções Impulso Resposta                        #
#                                                                     #
#---------------------------------------------------------------------#
# Determinando os nomes dos regimes
transition_function <- as.xts(ts(results_nl$fz,
start = c(2000,2),
end = c(2020,1),
frequency = 12))
date <- time(transition_function)
if ( (transition_function['2002:8'] < 0.2) &&
(transition_function['2002:9'] < 0.2) &&
(transition_function['2002:10'] < 0.2)) {
regime_1 = 'Regime de Depreciação'
regime_2 = 'Regime de Apreciação'
} else {
regime_1 = 'Regime de Apreciação'
regime_2 = 'Regime de Depreciação'
}
# Criando um vetor que contem os objetos dos plots
plot_lst <- vector("list", length = specs$n_endo_variables)
for (i in 1:specs$n_endo_variables) {
tryCatch(expr = {
IRF_df <- bind_cols(0:18,
results_nl$irf_s1_mean[specs$response,,i],
results_nl$irf_s1_up[specs$response,,i],
results_nl$irf_s1_low[specs$response,,i],
results_nl$irf_s2_mean[specs$response,,i],
results_nl$irf_s2_up[specs$response,,i],
results_nl$irf_s2_low[specs$response,,i],
.name_repair = ~ c('horizon',
'IRF s1',
'IRF_upper s1',
'IRF_lower s1',
'IRF s2',
'IRF_upper s2',
'IRF_lower s2'))
IRF_df
},
error = function(error_in_function){
message("Error in tibble 5!")
print(error_in_function)
}
)
ggplot(IRF_df)  +
geom_ribbon(aes(x=0:18, ymin=`IRF_lower s1`, ymax =`IRF_upper s1`),
fill = "indianred", alpha = 0.3) +
geom_line(aes(x=horizon, y=`IRF_lower s2`),color = "GREY50", alpha =  1, show.legend = F, size = 1) +
geom_line(aes(x=horizon, y=`IRF_upper s2`),color = "GREY50", alpha =  1, show.legend = F, size = 1) +
geom_hline(yintercept = 0, colour= 'darkgrey', linetype = 'dashed') +
geom_line(aes(x=horizon, y=`IRF s1`), color = 'indianred',linetype = 'dashed',size = 1) +
geom_line(aes(x=horizon, y=`IRF s2`), color = 'GREY10', linetype = 'solid' , size = 1) +
geom_point(data = IRF_df %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1),
aes(x=horizon, y = `IRF s1`),  size = 3,
shape = 24, fill = 'indianred') +
geom_point(data = IRF_df %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1),
aes(x=horizon, y = `IRF s2`),  size = 3,
shape = 24, fill = 'GREY50') +
scale_x_continuous(name = "",breaks=seq(0,18,1),
) +
labs(title = '') +
guides()  +
ylab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
plot.margin=grid::unit(c(0,-2,0,-5), "mm"),
plot.title = ggtext::element_markdown(size = 9, colour = 'black'),
axis.text.x = element_text(angle = 45,
vjust = 0.6,
hjust = 0.6,
size=11,
colour = 'black'),
axis.text.y = element_text(size=11,colour = 'black'))
ggsave(paste0('Resposta de ',
stringr::str_to_upper(specs$inflation_index),
' ao choque de ',
specs$endo_variables[i],
' - ',
regime_1,'.png'),
path = file.path('Output/Figures/'),
device = "png",width = 12, height = 8, units = "cm",scale = 2.5)
}
}
# Função de transição
plot_transition_function(results_nl,model_specs)
# IRFs
plot_IRFs(results_nl, model_specs)
View(plot_IRFs)
View(plot_IRFs)
ggplot(IRF_df)  +
geom_ribbon(aes(x=0:18, ymin=`IRF_lower s1`, ymax =`IRF_upper s1`),
fill = "indianred", alpha = 0.3) +
geom_line(aes(x=horizon, y=`IRF_lower s2`),color = "GREY50", alpha =  1, show.legend = F, size = 1) +
geom_line(aes(x=horizon, y=`IRF_upper s2`),color = "GREY50", alpha =  1, show.legend = F, size = 1) +
geom_hline(yintercept = 0, colour= 'darkgrey', linetype = 'dashed') +
geom_line(aes(x=horizon, y=`IRF s1`), color = 'indianred',linetype = 'dashed',size = 1) +
geom_line(aes(x=horizon, y=`IRF s2`), color = 'GREY10', linetype = 'solid' , size = 1) +
geom_point(data = IRF_df %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1),
aes(x=horizon, y = `IRF s1`),  size = 3,
shape = 24, fill = 'indianred') +
geom_point(data = IRF_df %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1),
aes(x=horizon, y = `IRF s2`),  size = 3,
shape = 24, fill = 'GREY50') +
scale_x_continuous(name = "",breaks=seq(0,18,1),
) +
labs(title = '') +
guides()  +
ylab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
plot.margin=grid::unit(c(0,-2,0,-5), "mm"),
plot.title = ggtext::element_markdown(size = 9, colour = 'black'),
axis.text.x = element_text(angle = 45,
vjust = 0.6,
hjust = 0.6,
size=11,
colour = 'black'),
axis.text.y = element_text(size=11,colour = 'black'))
IRF_df %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1)
IRF_df %>%
select(matches('* s2*'))
IRF_df %>%
select(matches('* s2*')) %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1)
IRF_df %>%
select(matches('* s2*') | matches('horizon')) %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1)
IRF_df %>%
select(matches('* s2$*') | matches('horizon')) %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1)
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
# IRFs
plot_IRFs(results_nl, model_specs)
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
# IRFs
plot_IRFs(results_nl, model_specs)
ggplot(IRF_df)  +
geom_ribbon(aes(x=0:18, ymin=`IRF_lower s1`, ymax =`IRF_upper s1`),
fill = "indianred", alpha = 0.3) +
geom_line(aes(x=horizon, y=`IRF_lower s2`),color = "GREY50", alpha =  1, show.legend = F, size = 1) +
geom_line(aes(x=horizon, y=`IRF_upper s2`),color = "GREY50", alpha =  1, show.legend = F, size = 1) +
geom_hline(yintercept = 0, colour= 'darkgrey', linetype = 'dashed') +
geom_line(aes(x=horizon, y=`IRF s1`), color = 'indianred',linetype = 'dashed',size = 1) +
geom_line(aes(x=horizon, y=`IRF s2`), color = 'GREY10', linetype = 'solid' , size = 1) +
geom_point(data = IRF_df %>%
select(matches('* s1$*') | matches('horizon')) %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1),
aes(x=horizon, y = `IRF s1`),  size = 4,
shape = 24, fill = 'indianred') +
geom_point(data = IRF_df %>%
select(matches('* s2$*') | matches('horizon')) %>%
filter(if_all(-horizon, ~ .x > 0) |
if_all(-horizon, ~ .x < 0)) %>%
slice(-1),
aes(x=horizon, y = `IRF s2`),  size = 4,
shape = 24, fill = 'GREY50') +
scale_x_continuous(name = "",breaks=seq(0,18,1)) +
scale_y_continuous(name = "",
breaks = scales::pretty_breaks(n = 8),
expand = c(0, 0)) +
labs(title = '') +
guides()  +
ylab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
plot.margin=grid::unit(c(0,-2,0,-5), "mm"),
plot.title = ggtext::element_markdown(size = 9, colour = 'black'),
axis.text.x = element_text(angle = 45,
vjust = 0.6,
hjust = 0.6,
size=11,
colour = 'black'),
axis.text.y = element_text(size=11,colour = 'black'))
source(here::here('Code','functions','plot_functions.R'))
# IRFs
plot_IRFs(results_nl, model_specs)
