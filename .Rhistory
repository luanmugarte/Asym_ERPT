scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.02, 0.001)) +
scale_y_continuous(name = "",
breaks = scales::pretty_breaks(n = 8),
expand = c(0.002, 0.001)) +
labs(title = 'Nominal exchange rate') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = ggtext::element_markdown(hjust = 0.5,
size = 10,
colour = 'black',
face ='bold'),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,
face = 'bold',
colour = 'black',))
cambio_plot <- ggplot(df)  +
geom_line(aes(x=date, y=cambio),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.02, 0.001)) +
scale_y_continuous(name = "",
breaks = scales::pretty_breaks(n = 8),
expand = c(0.002, 0.001)) +
labs(title = 'Nominal exchange rate') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = ggtext::element_markdown(hjust = 0.5,
size = 10,
colour = 'black',
face ='bold'),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,
face = 'bold',
colour = 'black'))
plot_grid(cambio_plot,
NULL,
state_plot,
align = 'v',
axis = 'r',
ncol = 1,
nrow = 3,
rel_heights =  c(1,0,1)) +
theme_minimal() +
theme(  panel.grid = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
panel.border = element_blank())
cambio_plot <- ggplot(df)  +
geom_line(aes(x=date, y=cambio),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.02, 0.001)) +
scale_y_continuous(name = "",
breaks = scales::pretty_breaks(n = 8),
expand = c(0.002, 0.001)) +
labs(title = 'Nominal exchange rate') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5,
size = 10,
colour = 'black',
face ='bold'),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,
face = 'bold',
colour = 'black'))
plot_grid(cambio_plot,
NULL,
state_plot,
align = 'v',
axis = 'r',
ncol = 1,
nrow = 3,
rel_heights =  c(1,0,1)) +
theme_minimal() +
theme(  panel.grid = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
panel.border = element_blank())
cambio_plot <- ggplot(df)  +
geom_line(aes(x=date, y=cambio),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.02, 0.001)) +
scale_y_continuous(name = "",
breaks = scales::pretty_breaks(n = 6),
expand = c(0.002, 0.001)) +
labs(title = 'Nominal exchange rate') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5,
size = 10,
colour = 'black',
face ='bold'),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,
face = 'bold',
colour = 'black'))
plot_grid(cambio_plot,
NULL,
state_plot,
align = 'v',
axis = 'r',
ncol = 1,
nrow = 3,
rel_heights =  c(1,0,1)) +
theme_minimal() +
theme(  panel.grid = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
panel.border = element_blank())
plot_transition_function <- function(results_nl,specs) {
transition_function <- as.xts(ts(results_nl$fz,
start = c(2000,2),
end = c(2020,1),
frequency = 12))
date <- time(transition_function)
if ( (transition_function['2002:8'] < 0.2) &&
(transition_function['2002:9'] < 0.2) &&
(transition_function['2002:10'] < 0.2)) {
regime_1 = 'depreciação'
regime_2 = 'apreciação'
} else {
regime_1 = 'apreciação'
regime_2 = 'depreciação'
}
date <- date[(max(c(lag_endog,lag_exog))):(length(date)-1)]
length(date)
# Criando dataframe dos dados
# tryCatch é usado para evitar uma mensagem chata de "New names"
tryCatch(expr = {df_state <- suppressMessages(
bind_cols(results_nl$fz,
date,
.name_repair = ~ c('transition_function',
'date')
))
},
error = function(error_in_function){
message("Error in tibble!")
print(error_in_function)
}
)
df_state
# Plotando o gráfico da função de transição
state_plot <- ggplot(df_state)  +
geom_line(aes(x=date, y=transition_function),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.01, 0.01)) +
scale_y_continuous(name = "",
breaks = scales::pretty_breaks(n = 6),
expand = c(0.01, 0.01)) +
labs(title = 'Transition function for the state of low level exchange rate') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = ggtext::element_markdown(hjust = 0.5,
size = 10,
colour = 'black',
face ='bold'),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,face = 'bold',
colour = 'black'))
state_plot
date
df <- raw_data %>%
select(cambio,date) %>%
slice(4:(n()-2))
cambio_plot <- ggplot(df)  +
geom_line(aes(x=date, y=cambio),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.02, 0.001)) +
scale_y_continuous(name = "",
breaks = scales::pretty_breaks(n = 6),
expand = c(0.002, 0.001)) +
labs(title = 'Nominal exchange rate') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5,
size = 10,
colour = 'black',
face ='bold'),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,
face = 'bold',
colour = 'black'))
plot_grid(cambio_plot,
NULL,
state_plot,
align = 'v',
axis = 'r',
ncol = 1,
nrow = 3,
rel_heights =  c(1,0,1)) +
theme_minimal() +
theme(  panel.grid = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
panel.border = element_blank())
ggsave(paste0('State_',regime_2,'.png'),
path = file.path('Output/Figures/'),
device = "png",width = 12, height = 8, units = "cm",scale = 2.5)
}
# Função de transição
plot_transition_function(results_nl,model_specs)
plot_transition_function <- function(results_nl,specs) {
transition_function <- as.xts(ts(results_nl$fz,
start = c(2000,2),
end = c(2020,1),
frequency = 12))
date <- time(transition_function)
if ( (transition_function['2002:8'] < 0.2) &&
(transition_function['2002:9'] < 0.2) &&
(transition_function['2002:10'] < 0.2)) {
regime_1 = 'depreciacao'
regime_2 = 'apreciacao'
} else {
regime_1 = 'apreciacao'
regime_2 = 'depreciacao'
}
date <- date[(max(c(lag_endog,lag_exog))):(length(date)-1)]
length(date)
# Criando dataframe dos dados
# tryCatch é usado para evitar uma mensagem chata de "New names"
tryCatch(expr = {df_state <- suppressMessages(
bind_cols(results_nl$fz,
date,
.name_repair = ~ c('transition_function',
'date')
))
},
error = function(error_in_function){
message("Error in tibble!")
print(error_in_function)
}
)
df_state
# Plotando o gráfico da função de transição
state_plot <- ggplot(df_state)  +
geom_line(aes(x=date, y=transition_function),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.01, 0.01)) +
scale_y_continuous(name = "",
breaks = scales::pretty_breaks(n = 6),
expand = c(0.01, 0.01)) +
labs(title = 'Transition function for the state of low level exchange rate') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = ggtext::element_markdown(hjust = 0.5,
size = 12,
colour = 'black',
face ='bold'),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,face = 'bold',
colour = 'black'))
state_plot
date
df <- raw_data %>%
select(cambio,date) %>%
slice(4:(n()-2))
cambio_plot <- ggplot(df)  +
geom_line(aes(x=date, y=cambio),
size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,1),
labels=paste0(c(""),
c(rep(2000:2019,each=1),2020)),
expand = c(0.02, 0.001)) +
scale_y_continuous(name = "",
breaks = scales::pretty_breaks(n = 6),
expand = c(0.002, 0.001)) +
labs(title = 'Nominal exchange rate') +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5,
size = 12,
colour = 'black',
face ='bold'),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45,
vjust = 0.5,
hjust = 0.6,
size=12,
colour = 'black',
face = 'bold'),
axis.text.y = element_text(size=12,
face = 'bold',
colour = 'black'))
plot_grid(cambio_plot,
NULL,
state_plot,
align = 'v',
axis = 'r',
ncol = 1,
nrow = 3,
rel_heights =  c(1,0,1)) +
theme_minimal() +
theme(  panel.grid = element_blank(),
plot.margin = unit(c(0,0,0,0), "cm"),
panel.border = element_blank())
ggsave(paste0('State_',regime_2,'.png'),
path = file.path('Output/Figures/'),
device = "png",width = 12, height = 8, units = "cm",scale = 2.5)
}
# Função de transição
plot_transition_function(results_nl,model_specs)
# Loading functions
source(here::here('Code','functions','data_and_model_functions.R'))
source(here::here('Code','functions','plot_functions.R'))
# Running main functions once
raw_data <- load_packages_and_data()
# Running main functions once
raw_data <- load_packages_and_data()
raw_data %>%
filter(diff(log(cambio)) > 0 )%>%
count()
raw_data %>%
mutate(cambio = diff(log(cambio)))%>%
filter(cambio > 0) %>%
count()
raw_data %>%
mutate(cambio = (cambio-stats::lag(cambio)/(stats::lag(cambio))))%>%
filter(cambio > 0) %>%
count()
raw_data %>%
mutate(cambio = (cambio-dplyr::lag(cambio)/(dplyr::lag(cambio))))%>%
filter(cambio > 0) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio)/(dplyr::lag(cambio))))%>%
filter(cambio > 0) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio)))%>%
filter(cambio > 0) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio)))%>%
filter(cambio < 0) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio))) %>%
mutate(cambio = SMA(cambio, 3)) %>%
filter(cambio < 0) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio))) %>%
mutate(cambio = SMA(cambio, 3)) %>%
filter(cambio > 0) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio))) %>%
mutate(cambio = SMA(cambio, 3)) %>%
filter(cambio > 0) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio))) %>%
mutate(cambio = SMA(cambio, 3)) %>%
filter(cambio > 0) %>%
filter(date > 2010)
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio))) %>%
mutate(cambio = SMA(cambio, 3)) %>%
filter(cambio > 0) %>%
filter(date > 2010) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio))) %>%
mutate(cambio = SMA(cambio, 3)) %>%
filter(cambio > 0) %>%
filter(date > 2010-01-01) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio))) %>%
mutate(cambio = SMA(cambio, 3)) %>%
filter(cambio > 0) %>%
filter(date > as.Date('2010-01-01')) %>%
count()
raw_data %>%
mutate(cambio = as.numeric(cambio)) %>%
mutate(cambio = (cambio-dplyr::lag(cambio))/(dplyr::lag(cambio))) %>%
mutate(cambio = SMA(cambio, 3)) %>%
filter(cambio < 0) %>%
filter(date > as.Date('2010-01-01')) %>%
count()
