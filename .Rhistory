.name_repair = ~ c('horizon', 'IRF','Upper','Low'))
df %<>% pivot_longer(cols = c(everything(),-horizon))
df
ggplot(data = df, aes(x= horizon, y = value)) +
geom_line(aes(color = name))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_line(aes(color = name %>% filter(name == 'IRF')))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_line(data = df %>% filter(name == 'IRF')))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_line(data = df %>% filter(name == 'IRF'))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_line(data = df %>% filter(name == 'IRF')) +
geom_ribbon(data = df %>% filter(name != 'IRF'))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_ribbon(ymin = IRF, ymax = Upper) +
geom_ribbon(ymin = Low, ymax = IRF) +
geom_line(data = df %>% filter(name == 'IRF')) +
df <- bind_cols(0:18,
c(0,results_nl$b_store_s2[[1]][4,2,]*results_nl$d[2,2]),
c(0,(results_nl$b_store_s2[[1]][4,2,]+
results_nl$stderr_store_s2[[1]][4,2,])*results_nl$d[2,2]),
c(0,(results_nl$b_store_s2[[1]][4,2,]-
results_nl$stderr_store_s2[[1]][4,2,])*results_nl$d[2,2]),
.name_repair = ~ c('horizon', 'IRF','Upper','Low'))
df %<>% pivot_longer(cols = c(everything(),-horizon))
df
ggplot(data = df, aes(x= horizon, y = value)) +
geom_ribbon(ymin = IRF, ymax = Upper) +
geom_ribbon(ymin = Low, ymax = IRF) +
geom_line(data = df %>% filter(name == 'IRF'))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_ribbon(aes(ymin = name$IRF, ymax = Upper)) +
geom_ribbon(aes(ymin = Low, ymax = IRF)) +
geom_line(data = df %>% filter(name == 'IRF'))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_ribbon(aes(ymin = IRF, ymax = Upper)) +
geom_ribbon(aes(ymin = Low, ymax = IRF)) +
geom_line(data = df %>% filter(name == 'IRF'))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_ribbon(aes(ymin = IRF, ymax = Upper)) +
geom_ribbon(aes(ymin = Low, ymax = IRF)) +
geom_line(data = df %>% filter(name == 'IRF'))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_line(data = df %>% filter(name == 'IRF'))
ggplot(data = df, aes(x= horizon, y = value)) +
geom_line(color = name)
df <- bind_cols(0:18,
c(0,results_nl$b_store_s2[[1]][4,2,]*results_nl$d[2,2]),
c(0,(results_nl$b_store_s2[[1]][4,2,]+
results_nl$stderr_store_s2[[1]][4,2,])*results_nl$d[2,2]),
c(0,(results_nl$b_store_s2[[1]][4,2,]-
results_nl$stderr_store_s2[[1]][4,2,])*results_nl$d[2,2]),
.name_repair = ~ c('horizon', 'IRF','Upper','Low'))
df %<>% pivot_longer(cols = c(everything(),-horizon))
df
ggplot(data = df, aes(x= horizon, y = value)) +
geom_line(aes(color = name))
chol_decomp = NULL
# Lista de outras opções
lags_option <- c(2:4)
DA_option <- c('pib_hiato_real', 'pimpf','capacidade','pib')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 14400
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
# Include interest rate as a endogenous variable
include_interest_rate = T
chol_decomp = NULL
# Lista de outras opções
lags_option <- c(2:4)
DA_option <- c('pib_hiato_real', 'pimpf','capacidade','pib')
# Contador simples
counter <- 0
loop_counter <- 0
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 14400
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,'taxa_juros',inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,'taxa_juros',inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
chol_decomp = NULL
# Lista de outras opções
lags_option <- c(2:4)
DA_option <- c('pib_hiato_real', 'pimpf','capacidade','pib')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 14400
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,'taxa_juros',inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,'taxa_juros',inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
# Loading functions
source(here::here('Code','functions','data_and_model_functions.R'))
source(here::here('Code','functions','plot_functions.R'))
# Running main functions once
raw_data <- load_packages_and_data()
# Loading functions
source(here::here('Code','functions','data_and_model_functions.R'))
source(here::here('Code','functions','plot_functions.R'))
# Running main functions once
raw_data <- load_packages_and_data()
# Escolhas consolidadas
# Tendência (1) ou sem tendência (0)
model_trend = 0
# Efeito contemporâneo presente (1) ou ausente  (0) da variável exógena
contemp_effect = 0
# Lags da variável de transição
lag_switch_variable = F
# Frequência (mensal ou trim)
model_frequency = 'mensal'
# Horizonte das LP's
hor_lps <- 18
# Intervalo de confiança das IRFs
sig_IC = 95
# Inflação externa endógena
comm_endo = T
# Variável de inflação externa
ext_inflation = 'comm'
# Índice de inflação
inflation_index = 'ipca'
# Lags das variáveis exógenas
lag_exog = 1
# Incluir dummy da GFC
include_gfc_dummy = F
# Taxa de desemprego no modelo
desemprego_on = F
# Taxa de Desemprego em variação percentual
desemprego_diff = F
# Taxa de desemprego como variável exógena (mais apropriado para comparação de índices de inflação)
desemprego_exog = F
# Include interest rate as a endogenous variable
include_interest_rate = T
chol_decomp = NULL
# Include interest rate as a endogenous variable
include_interest_rate = F
chol_decomp = NULL
DA_option <- c('pib_hiato_real', 'pimpf','capacidade','pib')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
# Lista de outras opções
lags_option <- c(2:4)
DA_option <- c('pib_hiato_real', 'pimpf','capacidade','pib')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 14400
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
# Relações contemporâneas
chol_decomp = diag(as.character(NA), nrow = 4, ncol = 4)
# Lista de outras opções
lags_option <- c(2:4)
DA_option <- c('pib_hiato_real', 'pimpf','capacidade','pib')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 14400
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
lag_endog = i
gamma_transition = 10
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
A
# Incluir taxa de juros
include_interest_rate = T
chol_decomp = NULL
# Ordem das variáveis endógenas
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
# Rodando função de estimação
model_obj <- get_model_specification(raw_data)
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
chol_decomp = diag(as.character(NA), nrow = 5, ncol = 5)
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
chol_decomp = diag(as.character(NA), nrow = 5, ncol = 5)
include_interest_rate = T
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
chol_decomp = diag(as.character(NA), nrow = 5, ncol = 5)
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
model_data$modelo_endo
chol_decomp = diag(as.character(NA),
nrow = ncol(model_data$modelo_endo),
ncol = ncol(model_data$modelo_endo))
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
A
include_interest_rate = T
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_data$modelo_endo
raw_data
vars_order <- c(ext_inflation, 'cambio',DA_variable,'taxa_juros',inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_data$modelo_endo
chol_decomp = diag(as.character(NA),
nrow = ncol(model_data$modelo_endo),
ncol = ncol(model_data$modelo_endo))
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
A
?SVAR
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'scoring')$A
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'scoring', max.iter = 1000)$A
A
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
A
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'scoring', max.iter = 1000)$A
A
include_interest_rate = F
raw_data
vars_order <- c(ext_inflation, 'cambio',DA_variable,'taxa_juros',inflation_index)
model_obj <- get_model_specification(raw_data)
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_data$modelo_endo
chol_decomp = diag(as.character(NA),
nrow = ncol(model_data$modelo_endo),
ncol = ncol(model_data$modelo_endo))
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
A
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'scoring', max.iter = 1000)$A
A
include_interest_rate = T
raw_data
vars_order <- c(ext_inflation, 'cambio',DA_variable,'taxa_juros', inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_data$modelo_endo
chol_decomp = matrix(c(c(NA,0,0,0,0),
c(0,NA,0,0,0),
c(0,0,NA,0,0),
c(0,0,0,NA,0),
c(NA,NA,0,0,NA)),
nrow= 5, ncol = 5, byrow= T)chol_decomp = diag(as.character(NA),
nrow = ncol(model_data$modelo_endo),
ncol = ncol(model_data$modelo_endo))
chol_decomp = matrix(c(c(NA,0,0,0,0),
c(0,NA,0,0,0),
c(0,0,NA,0,0),
c(0,0,0,NA,0),
c(NA,NA,0,0,NA)),
nrow= 5, ncol = 5, byrow= T)
model_data$modelo_endo
chol_decomp = matrix(c(c(NA,0,0,0,0),
c(0,NA,0,0,0),
c(0,0,NA,0,0),
c(0,0,0,NA,0),
c(NA,NA,0,0,NA)),
nrow= 5, ncol = 5, byrow= T)
raw_data
vars_order <- c(ext_inflation, 'cambio',DA_variable,'taxa_juros', inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_data$modelo_endo
chol_decomp = matrix(c(c(NA,0,0,0,0),
c(0,NA,0,0,0),
c(0,0,NA,0,0),
c(0,0,0,NA,0),
c(NA,NA,0,0,NA)),
nrow= 5, ncol = 5, byrow= T)
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
A
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'scoring', max.iter = 1000)$A
A
chol_decomp = matrix(c(c(NA,0,0,0,0),
c(NA,NA,0,0,0),
c(NA,NA,NA,0,0),
c(NA,NA,NA,NA,0),
c(NA,NA,NA,NA,NA)),
nrow= 5, ncol = 5, byrow= T)
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'direct')$A
A
A <- SVAR(VAR(model_data$modelo_endo, p = 3),
Amat = chol_decomp, estmethod = 'scoring', max.iter = 1000)$A
A
