include_interest_rate = F
# Include
include_selic = F
# Relações contemporâneas
chol_decomp_diag = diag(as.character(NA), nrow = 4, ncol = 4)
chol_decomp_LT = NULL
# NW Pre-white
pre_white = F
# Adjust Standard Erros
adjust_se = F
# Lista de outras opções
lags_option <- c(2:4)
DA_option <- c('pib_hiato_real', 'pimpf','capacidade','pib')
gamma_option <- c(6,8,10,12)
chol_option <- list(chol_decomp_diag, chol_decomp_LT)
inflation_index_option <- c('ipa','igp')
chol_option
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- inflation_index_option
second_loop <- lags_option
# Lista de outras opções
lags_option <- c(2:4)
DA_option <- c('pib_hiato_real', 'pimpf','capacidade','pib')
gamma_option <- c(6,8,10,12)
chol_option <- list(chol_decomp_diag, chol_decomp_LT)
inflation_index_option <- c('ipa','igp')
chol_option
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- inflation_index_option
second_loop <- lags_option
for (i in first_loop){
for (j in second_loop) {
lag_endog = j
gamma_transition = 12
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = 'pimpf'
chol_decomp = NULL
include_interest_rate = F
include_selic = F
inflation_index = i
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
print('ok')
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
print('ok')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
lag_endog = j
gamma_transition = 12
nome_modelo = 'default'
lambda_hp = 14400
DA_variable = 'pimpf'
chol_decomp = NULL
include_selic = F
include_interest_rate = F
inflation_index = i
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == 2*length(first_loop)*length(second_loop)) {
print("Done!")
}
}
# Loading functions
source(here::here('Code','functions','data_and_model_functions.R'))
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- inflation_index_option
second_loop <- lags_option
for (i in first_loop){
for (j in second_loop) {
lag_endog = j
gamma_transition = 12
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = 'pimpf'
chol_decomp = NULL
include_interest_rate = F
include_selic = F
inflation_index = i
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
print('ok')
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
print('ok')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
lag_endog = j
gamma_transition = 12
nome_modelo = 'default'
lambda_hp = 14400
DA_variable = 'pimpf'
chol_decomp = NULL
include_selic = F
include_interest_rate = F
inflation_index = i
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == 2*length(first_loop)*length(second_loop)) {
print("Done!")
}
}
plot(taxa_juros)
plot(selic_defl.hp$trend)
# Deflacionando a Selic
# selic_defl <- selic-ipca_acum
selic_defl <- deflateBR::deflate(selic,
seq.Date(from = as.Date("2000-01-01"), to = as.Date("2020-01-01"), by = "month"),
'01/2000'
)
plot(selic_defl, type = 'l')
# Deflacionando a Selic
selic_defl <- selic-ipca_acum
plot(selic_defl, type = 'l')
# Criando série da taxa de juros
selic_defl.hp <- hpfilter(selic_defl, freq = 192600, type = 'lambda')
par(mfrow=c(1,1))
taxa_juros <- (selic)-selic_defl.hp$trend
plot(taxa_juros)
plot(selic_defl.hp$trend)
?deflateBR
??deflateBR
?deflateBR::deflate
# igp
igp
monthplot(igp)
seas_igp <- seas(x = igp)
# igp
igp
# IGP-10 índice
igp <- read.csv("Data/Analytic/igp10.csv")
# IPA-10 índice
ipa <- read.csv("Data/Analytic/ipa10.csv")
# IGP
igp <- ts(diff(log(igp[,2]))[77:nrow(igp)], start = c(2000,1), end = c(2020,1), frequency = 12)
# IPA
ipa <- ts(diff(log(ipa[,2]))[77:nrow(ipa)], start = c(2000,1), end = c(2020,1), frequency = 12)
plot(ipa)
plot(igp)
# igp
igp
monthplot(igp)
# Code for cleaning and manipulating the data
# into the necessary objects for the estimation
# Carregando os dados ####
# # IPCA
ipca <- read.csv("Data/Analytic/ipcacompleto.csv")
ipca
# IPCA índice
ipcaindice <- read.csv("Data/Analytic/ipcaindice.csv")
# IGP-10 índice
igp <- read.csv("Data/Analytic/igp10.csv")
# IPA-10 índice
ipa <- read.csv("Data/Analytic/ipa10.csv")
# IPCA decomposto
ipcadecomp <- read.csv('Data/Analytic/IPCAdecomposto.csv')
# Cambio
cambiocompleto <- read.csv("Data/Analytic/cambiocompleto.csv")
# Capacidade
capacidade <- read.csv("Data/Analytic/capacidade.csv")
# Commodities
comm <- read.csv("Data/Analytic/comm.csv")
# PIM-PF
pimpf <- read.csv("Data/Analytic/pimpf.csv")
# PIM-PF antiga
pimpfantiga <- read.csv("Data/Analytic/pimpfantiga.csv")
# Desemprego (Retropolada)
desemprego <- read.csv('Data/Analytic/PNADc Retropolada (Carvalho, 2016) - Taxa de Desemprego.csv', header = F, dec = ",")
# Índice Petróleo - FMI
petro <- read.csv("Data/Analytic/APSP_oil.csv")
petro
# PIB
pib_mensal <- read.csv("Data/Analytic/pib_mensal.csv", sep = ';')
pib_mensal
# PIB deflacionado por IPCA
pib_ipca <- read.csv("Data/Analytic/pib_ipca.csv", sep = ',')
pib_ipca
# Selic
selic <- read.csv("Data/Analytic/selic_over_media.csv", sep = ',')
selic
#### Manipulando as séries ####
# Ajustando nomes das colunas
colnames(capacidade) <- cbind('index','data','valores')
# Compatilizando PIM-PF ####
# Convertendo séries em objetos ts
pimpf <- ts(pimpf[1:nrow(pimpf),2], start = c(2002,1), end = c(2020,02), frequency = 12)
pimpfantiga <- ts(pimpfantiga[1:nrow(pimpfantiga),2], start = c(1999,1), frequency = 12)
# Valor de proporção
pimpf[1]/pimpfantiga[37]
# Compatibilizando a PIM-PF antiga com o valor de proporção
pimpfantiga <- ts(pimpfantiga*(pimpf[1]/pimpfantiga[37]), start = c(1999,1), frequency = 12)
# Ano de 2002
pimpfantiga[37:48]
# Criando série unificada
pimpf <- ts(c(pimpfantiga[13:36],pimpf[1:length(pimpf)]), start = c(2000,1), end = c(2020,1), frequency = 12)
# Vendo as séries
ipcaindice[1,]
ipa[1,]
igp[1,]
ipcadecomp[1,]
cambiocompleto[1,]
comm[1,]
capacidade[1,]
desemprego[1,]
pimpf[1]
# Convertendo em objetos ts - Período: 01/2000 - 02/2020 ####
# IPCA - variacao mensal
ipca <- ts((ipca[13:nrow(ipca),2])/100, start = c(2000,1), end = c(2020,1), frequency = 12)
# IPCA - Índice
ipcaindice <- ts((ipcaindice[13:nrow(ipcaindice),2]), start = c(2000,1), end = c(2020,1), frequency = 12)
# IPCA - variacao acumulada em 12 meses
ipca_acum <- ts(ipcadecomp[14:nrow(ipcadecomp),2], start = c(2000,1), end = c(2020,1), frequency = 12)
# Cambio
cambio <- (ts(cambiocompleto[13:nrow(cambiocompleto),2], start = c(2000,1),  end = c(2020,1), frequency = 12))
# Commodities
comm <- ts((comm[13:nrow(comm),2]),  start = c(2000,1), end = c(2020,1), frequency = 12)
# Utilizacao de capacidade
capacidade <- ts((capacidade[97:nrow(capacidade),2]),  start = c(2000,1), end = c(2020,1), frequency = 12)
# Taxa de desemprego
desemprego <- ts(desemprego[25:nrow(desemprego),2], start = c(2000,1), end = c(2020,1), frequency = 12)
# IGP
igp <- ts(diff(log(igp[,2]))[77:nrow(igp)], start = c(2000,1), end = c(2020,1), frequency = 12)
# IPA
ipa <- ts(diff(log(ipa[,2]))[77:nrow(ipa)], start = c(2000,1), end = c(2020,1), frequency = 12)
# IPCA - Alimentos e Bebidas
ipca_alimbebs <- ts((ipcadecomp[14:nrow(ipcadecomp),3]), start = c(2000,1), end = c(2020,1), frequency = 12)
# Petroleo
petro <- ts((petro[7:nrow(petro),2]),  start = c(2000,1), end = c(2020,1), frequency = 12)
# PIB mensal
pib_mensal <- ts((pib_mensal[7:nrow(pib_mensal),2]),  start = c(2000,1), end = c(2020,1), frequency = 12)
# PIB deflacionado por IPCA
pib_ipca <- ts((pib_ipca[242:nrow(pib_ipca),1]),  start = c(2000,1), end = c(2020,1), frequency = 12)
pib_ipca
# Selic
selic <-  ts(selic[164:nrow(selic),2]/100, start = c(2000,1), end = c(2020,1), frequency = 12)
selic
# Dummy para a GFC (começa em julho porque é incluida defasada no modelo)
gfc_dummy <- tibble(seq(from = as.Date("2000-01-01"), to = as.Date("2020-01-01"), by = 'month'), .name_repair = ~c("date")) %>%
mutate(dummy = ifelse(((date > "2008-07-01") & (date < "2009-07-01")), 1,0)) %>%
dplyr::select(dummy)
gfc_dummy
# Plotando as śeries
par(mfrow=c(1,1))
plot(ipca)
plot(igp)
plot(ipa)
plot(ipca_alimbebs)
plot(comm)
plot(capacidade)
plot(cambio)
plot(desemprego)
plot(pimpf)
#### Dessazonalizando as séries ####
# IPCA
ipca
monthplot(ipca)
seas_ipca <- seas(x = ipca)
summary(seas_ipca)
seasonal::qs(seas_ipca)
ipcadessaz <- series(seas_ipca, "s11")
par(mfrow=c(2,1))
plot(ipca/100)
plot(diff(log(ipcaindice)))
ipca <- ipcadessaz
# igp
igp
monthplot(igp)
monthplot(igp)
seas_igp <- seas(x = igp)
summary(seas_igp)
seasonal::qs(seas_igp)
igpdessaz <- series(seas_igp, "s11")
par(mfrow=c(2,1))
plot(igp/100)
plot(diff(log(igpindice)))
plot(diff(log(igp)))
igp <- igpdessaz
plot(igpdessaz)
plot(igp)
# ipa
ipa
monthplot(ipa)
seas_ipa <- seas(x = ipa)
summary(seas_ipa)
seasonal::qs(seas_ipa)
ipadessaz <- series(seas_ipa, "s11")
par(mfrow=c(2,1))
plot(ipadessaz)
plot(ipa)
ipa <- ipadessaz
# Código do for loop
first_loop <- inflation_index_option
second_loop <- lags_option
for (i in first_loop){
for (j in second_loop) {
lag_endog = j
gamma_transition = 12
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = 'pimpf'
chol_decomp = chol_decomp_diag
include_interest_rate = F
include_selic = F
inflation_index = i
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
print('ok')
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
print('ok')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
lag_endog = j
gamma_transition = 12
nome_modelo = 'default'
lambda_hp = 14400
DA_variable = 'pimpf'
chol_decomp = chol_decomp_diag
include_selic = F
include_interest_rate = F
inflation_index = i
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == 2*length(first_loop)*length(second_loop)) {
print("Done!")
}
}
# Loading functions
source(here::here('Code','functions','data_and_model_functions.R'))
source(here::here('Code','functions','plot_functions_old.R'))
# Running main functions once
raw_data <- load_packages_and_data()
# Escolhas consolidadas
# Tendência (1) ou sem tendência (0)
model_trend = 0
# Efeito contemporâneo presente (1) ou ausente  (0) da variável exógena
contemp_effect = 0
# Lags da variável de transição
lag_switch_variable = T
# Frequência (mensal ou trim)
model_frequency = 'mensal'
# Horizonte das LP's
hor_lps <- 18
# Intervalo de confiança das IRFs
sig_IC = 95
# Inflação externa endógena
comm_endo = T
# Variável de inflação externa
ext_inflation = 'comm'
# Índice de inflação
inflation_index = 'ipa'
# Lags das variáveis exógenas
lag_exog = 1
# Incluir dummy da GFC
include_gfc_dummy = F
# Taxa de desemprego no modelo
desemprego_on = F
# Taxa de Desemprego em variação percentual
desemprego_diff = F
# Taxa de desemprego como variável exógena (mais apropriado para comparação de índices de inflação)
desemprego_exog = F
# Include interest rate as a endogenous variable
include_interest_rate = F
# Include
include_selic = F
# Include interest rate as a endogenous variable
include_interest_rate = F
# Include
include_selic = F
# Relações contemporâneas
chol_decomp_diag = diag(as.character(NA), nrow = 4, ncol = 4)
chol_decomp_LT = NULL
# NW Pre-white
pre_white = F
# Adjust Standard Erros
adjust_se = F
# Lista de outras opções
lags_option <- c(2:4)
DA_option <- c('pib_hiato_real', 'pimpf','capacidade','pib')
gamma_option <- c(6,8,10,12)
chol_option <- list(chol_decomp_diag, chol_decomp_LT)
inflation_index_option <- c('ipa','igp')
chol_option
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- inflation_index_option
inflation_index_option <- c('ipa','igp','ipca')
chol_option
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- inflation_index_option
second_loop <- lags_option
for (i in first_loop){
for (j in second_loop) {
lag_endog = j
gamma_transition = 12
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = 'pimpf'
chol_decomp = chol_decomp_diag
include_interest_rate = F
include_selic = F
inflation_index = i
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
print('ok')
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
print('ok')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
lag_endog = j
gamma_transition = 12
nome_modelo = 'default'
lambda_hp = 14400
DA_variable = 'pimpf'
chol_decomp = chol_decomp_diag
include_selic = F
include_interest_rate = F
inflation_index = i
# Ordem das variáveis
vars_order <- c(ext_inflation, 'cambio',DA_variable,inflation_index)
model_obj <- get_model_specification(raw_data)
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == 2*length(first_loop)*length(second_loop)) {
print("Done!")
}
}
