# Criando dataframe dos dados
# tryCatch é usado para evitar uma mensagem chata de "New names"
tryCatch(expr = {df <- suppressMessages(as_tibble(bind_cols(results_nl$fz,date), .name_repair = ~vctrs::vec_as_names(c('transition_function','date'), repair = "unique", quiet = TRUE)))},
error = function(error_in_function){
message("Error in tibble!")
print(error_in_function)
}
)
df
# Plotando o gráfico da função de transição
ggplot(df)  +
geom_line(aes(x=date, y=transition_function), size = 0.75, color = 'darkred') +
scale_x_continuous(breaks=seq(2000,2020.23,0.5),
labels=paste0(c("Jan ",'Jun '),c(rep(2000:2019,each=2),2020)),expand = c(0, 0)) +
labs(title = paste0('Função de Transição - ',regime_2, ' - gamma = ', as.character(gamma_transition))) +
scale_fill_brewer(palette="Blues") +
ylab('') +
xlab('') +
theme_classic() +
theme(  panel.grid = element_blank(),
panel.border = element_blank(),
legend.position="right",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.text = element_text(size=10),
legend.key = element_rect(colour = "black"),
legend.box.background = element_rect(colour = "black", size = 1),
axis.text.x = element_text(angle = 45, vjust = 0.5, hjust = 0.6,size=12, colour = 'black',face = 'bold'),
axis.text.y = element_text(size=12,face = 'bold'))
ggsave(paste0('Funcao_Transicao_',
stringr::str_to_upper(specs$inflation_index),'.png'),
device = "png",width = 12, height = 8, units = "cm",scale = 2.5)
# End function
return(list(regime_1 = regime_1,regime_2 = regime_2))
}
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
setwd('~/Artigos/Asym_ERPT')
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
results_nl
results_nl
IRF_s1 <- suppressMessages(tibble(bind_cols(results_nl$irf_s1_mean[specs$response,,i],
results_nl$irf_s1_up[specs$response,,i],
results_nl$irf_s1_low[specs$response,,i]),
.name_repair = ~ c('IRF','IRF_upper_base','IRF_lower_base'))) %>%
mutate(IRF_upper = if_else(IRF_upper_base < IRF_lower_base, IRF_lower_base,IRF_upper_base)) %>%
mutate(IRF_lower = if_else(IRF_upper_base > IRF_lower_base, IRF_lower_base,IRF_upper_base)) %>%
dplyr::select(!c(IRF_upper_base,IRF_lower_base))
IRF_s1 <- suppressMessages(tibble(bind_cols(results_nl$irf_s1_mean[model_specs$response,,i],
results_nl$irf_s1_up[model_specs$response,,i],
results_nl$irf_s1_low[model_specs$response,,i]),
.name_repair = ~ c('IRF','IRF_upper_base','IRF_lower_base'))) %>%
mutate(IRF_upper = if_else(IRF_upper_base < IRF_lower_base, IRF_lower_base,IRF_upper_base)) %>%
mutate(IRF_lower = if_else(IRF_upper_base > IRF_lower_base, IRF_lower_base,IRF_upper_base)) %>%
dplyr::select(!c(IRF_upper_base,IRF_lower_base))
i = 4
IRF_s1 <- suppressMessages(tibble(bind_cols(results_nl$irf_s1_mean[model_specs$response,,i],
results_nl$irf_s1_up[model_specs$response,,i],
results_nl$irf_s1_low[model_specs$response,,i]),
.name_repair = ~ c('IRF','IRF_upper_base','IRF_lower_base'))) %>%
mutate(IRF_upper = if_else(IRF_upper_base < IRF_lower_base, IRF_lower_base,IRF_upper_base)) %>%
mutate(IRF_lower = if_else(IRF_upper_base > IRF_lower_base, IRF_lower_base,IRF_upper_base)) %>%
dplyr::select(!c(IRF_upper_base,IRF_lower_base))
results_nl$irf_s1_mean[model_specs$response,,i]
model_specs$response
View(get_model_specification)
View(get_model_specification)
source("~/Artigos/Asym_ERPT/Code/functions/data_and_model_functions.R", echo=TRUE)
# Rodando função de estimação
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_specs$
# Rodando vários modelos ####
# Escolhas consolidadas
# Tendência (1) ou sem tendência (0)
model_trend = 0
results_nl$irf_s1_mean[model_specs$response,,i]
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
specs$endo_variables[, i]
specs$endo_variables[, i]
model_specs$endo_variables[, i]
model_specs$endo_variables[, 1]
model_specs$endo_variables
c(model_specs$endo_variables)
c(model_specs$endo_variables)[1]
View(plot_lin_results)
View(plot_lin_results)
# Loading functions
source(here::here('Code','functions','data_and_model_functions.R'))
source(here::here('Code','functions','plot_functions.R'))
# Rodando função de estimação
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Rodando função de estimação
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
setwd('~/Artigos/Asym_ERPT')
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
View(plot_lin_results)
View(plot_lin_results)
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
# Caminho para o diretório padrão ####
setwd('~/Artigos/Asym_ERPT')
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
# Loading functions
source(here::here('Code','functions','data_and_model_functions.R'))
source(here::here('Code','functions','plot_functions.R'))
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
setwd('~/Artigos/Asym_ERPT')
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
model_specs$n_endo_variables
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
plot_lst <- vector("list", length = length(model_specs$n_endo_variables))
plot_lst[[2]]
plot_lst[[2]]
plot_lst <- vector("list", length = length(model_specs$n_endo_variables))
plot_lst[[2]]
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
setwd('~/Artigos/Asym_ERPT')
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
# Caminho para o diretório padrão ####
setwd('~/Artigos/Asym_ERPT')
# Loading functions
source(here::here('Code','functions','data_and_model_functions.R'))
# Rodando função de estimação
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
results_nl <- lp_nl(
data$modelo_endo, # Variáveis endógenas
lags_endog_lin = specs$lag_endog, # Lags do modelo
lags_endog_nl = specs$lag_endog, # Lags do modelo
shock_type = 0, # Tipo de choque: no caso, 0 é de 1 desvio padrão
confint = 1.96, # Intervalo de confiança de 95%
use_nw = T, # Usar erros padrão de Newey-West para as respostas ao impulso (correção de viés)
hor = specs$hor_lps, # Horizonte para as LP
switching = data$cambio_switching, # Definição da série de transição
lag_switching = specs$lag_switch_variable, # Uso da variável de transição de forma defasada
use_hp = T, # Usar filtro de HP para decompor
lambda = specs$lambda_hp, # Lambda para o filtro HP, 14400 é mensal
trend = specs$model_trend, # Sem variável de tendência
gamma = specs$gamma_transition, # Definição de gamma para a função de transição
contemp_data = specs$contemp_effect_lp, # Variáveis exógenas com efeito contemporâneo
exog_data = data$modelo_exog, # Variáveis exógenas com efeitos defasados
lags_exog = specs$lag_exog, # Lags das variáveis exógenas
nw_prewhite = T,
adjust_se = F,
chol_decomp = specs$chol_decomp
)
source("~/Artigos/Asym_ERPT/Code/functions/data_and_model_functions.R", echo=TRUE)
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
# Escolhas consolidadas
# Tendência (1) ou sem tendência (0)
model_trend = 0
# Efeito contemporâneo presente (1) ou ausente  (0) da variável exógena
contemp_effect = 0
# Lags da variável de transição
lag_switch_variable = T
# Frequência (mensal ou trim)
model_frequency = 'mensal'
# Horizonte das LP's
hor_lps <- 18
# Intervalo de confiança das IRFs
sig_IC = 95
# Inflação externa endógena
comm_endo = F
# Inflação externa endógena
comm_endo = T
# Variável de inflação externa
ext_inflation = 'comm'
# Índice de inflação
inflation_index = 'ipca'
# Incluir dummy da GFC
include_gfc_dummy = F
# Taxa de desemprego no modelo
desemprego_on = F
# Taxa de Desemprego em variação percentual
desemprego_diff = F
# Taxa de desemprego como variável exógena (mais apropriado para comparação de índices de inflação)
desemprego_exog = F
# Lista de outras opções
lags_option <- c(2,3,4,5)
DA_option <- c('pib','pib_hiato_real','pimpf')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- gamma_option
second_loop <- DA_option
# Caso interrompa loop
path_directory <- '/home/luanmugarte/Artigos/Asym_ERPT'
setwd(path_directory)
#
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 8
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
# Lista de outras opções
lags_option <- c(2,3,4,5)
DA_option <- c('pib','pib_hiato_real','pimpf')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
# Caso interrompa loop
path_directory <- '/home/luanmugarte/Artigos/Asym_ERPT'
setwd(path_directory)
#
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 8
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
chol_decomp = NULL
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 8
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
source("~/Artigos/Asym_ERPT/Code/functions/plot_functions.R", echo=TRUE)
m
m
# Caso interrompa loop
path_directory <- '/home/luanmugarte/Artigos/Asym_ERPT'
setwd(path_directory)
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 8
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
chol_decomp = matrix(c(c(NA,0,0,0),
c(NA,NA,0,0),
c(0,0,NA,0),
c(NA,NA,NA,0)),
nrow= 4, ncol =4, byrow= T)
chol_decomp
# Lista de outras opções
lags_option <- c(2,3,4,5)
DA_option <- c('pib','pib_hiato_real','pimpf')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
# Caso interrompa loop
path_directory <- '/home/luanmugarte/Artigos/Asym_ERPT'
setwd(path_directory)
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 8
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
chol_decomp = matrix(c(c(NA,0,0,0),
c(NA,NA,0,0),
c(0,0,NA,0),
c(NA,NA,NA,0)),
nrow= 4, ncol =4, byrow= T)
# Lista de outras opções
lags_option <- c(2,3,4,5)
DA_option <- c('pib','pib_hiato_real','pimpf')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
# Rodando função de estimação
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
chol_decomp = matrix(c(c(NA,0,0,0),
c(NA,NA,0,0),
c(0,0,NA,0),
c(NA,NA,0,NA)),
nrow= 4, ncol =4, byrow= T)
# Lista de outras opções
lags_option <- c(2,3,4,5)
DA_option <- c('pib','pib_hiato_real','pimpf')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
# Caso interrompa loop
path_directory <- '/home/luanmugarte/Artigos/Asym_ERPT'
setwd(path_directory)
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 8
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
VARselect(modelo_endo, lag.max =24)
chol_decomp = matrix(c(c(NA,0,0,0),
c(0,NA,0,0),
c(0,0,NA,0),
c(NA,NA,0,NA)),
nrow= 4, ncol =4, byrow= T)
# Lista de outras opções
lags_option <- c(2,3,4,5)
DA_option <- c('pib','pib_hiato_real','pimpf')
# Contador simples
counter <- 0
loop_counter <- 0
# Código do for loop
first_loop <- lags_option
second_loop <- DA_option
# Caso interrompa loop
path_directory <- '/home/luanmugarte/Artigos/Asym_ERPT'
setwd(path_directory)
for (i in first_loop){
for (j in second_loop) {
lag_endog = i
gamma_transition = 8
nome_modelo = 'default'
lambda_hp = 192600
DA_variable = j
model_obj <- get_model_specification()
model_specs <- model_obj[[1]]
model_data <- model_obj[[2]]
model_results <- run_models(model_data,model_specs)
results_nl <- model_results[[1]]
results_lin <- model_results[[2]]
# Exportando figures
export_figures(results_nl,results_lin,model_specs)
if (dir.exists(file.path('Output/Figures', model_specs$nome_modelo))) {
counter = counter + 1
print(paste0(counter," model(s) run!"))
}
loop_counter <- loop_counter + 1
}
if (loop_counter == length(first_loop)*length(second_loop)) {
print("Done!")
}
}
chol_decomp
