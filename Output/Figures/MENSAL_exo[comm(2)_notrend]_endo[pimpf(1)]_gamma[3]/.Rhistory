pimpfantiga <- ts(pimpfantiga*(pimpf[1]/pimpfantiga[37]), start = c(1999,1), frequency = 12)
# Ano de 2002
pimpfantiga[37:48]
# Criando série unificada
pimpf <- ts(c(pimpfantiga[7:36],pimpf[1:length(pimpf)]), start = c(1999,7), end = c(2020,2), frequency = 12)
# Vendo as séries
ipcaindice[1,]
ipa[1,]
igp[1,]
ipcadecomp[1,]
cambiocompleto[1,]
comm[1,]
capacidade[1,]
desemprego[1,]
pimpf[1]
# Convertendo em objetos ts - Período: 07/1999 - 02/2020 ####
ipca <- ts((ipca[7:nrow(ipca),2]), start = c(1999,7), end = c(2020,2), frequency = 12)
# IPCA - Índice
ipcaindice <- ts((ipcaindice[7:nrow(ipcaindice),2]), start = c(1999,7), end = c(2020,2), frequency = 12)
# Cambio
cambio <- (ts(cambiocompleto[7:nrow(cambiocompleto),2], start = c(1999,7),  end = c(2020,2), frequency = 12))
# Commodities
comm <- ts((comm[7:nrow(comm),2]),  start = c(1999,7), end = c(2020,2), frequency = 12)
# Utilizacao de capacidade
capacidade <- ts((capacidade[91:nrow(capacidade),2]),  start = c(1999,7), end = c(2020,2), frequency = 12)
# Taxa de desemprego
desemprego <- ts(desemprego[19:nrow(desemprego),2], start = c(1999,7), end = c(2020,2), frequency = 12)
# IGP
igp <- ts((igp[71:nrow(igp),2]), start = c(1999,7), end = c(2020,2), frequency = 12)
# IPA
ipa <- ts((ipa[71:nrow(ipa),2]), start = c(1999,7), end = c(2020,2), frequency = 12)
# IPCA - Alimentos e Bebidas
ipca_alimbebs <- ts((ipcadecomp[8:nrow(ipcadecomp),3]), start = c(1999,7), end = c(2020,2), frequency = 12)
# Plotando as śeries
par(mfrow=c(1,1))
plot.ts(ipca)
plot.ts(igp)
plot.ts(ipa)
plot.ts(ipca_alimbebs)
plot.ts(comm)
plot.ts(capacidade)
plot.ts(cambio)
plot.ts(desemprego)
plot.ts(pimpf)
#### Dessazonalizando as séries ####
# IPCA
ipca
monthplot(ipca)
seas_ipca <- seas(x = ipca)
summary(seas_ipca)
seasonal::qs(seas_ipca)
ipcadessaz <- series(seas_ipca, "s11")
par(mfrow=c(3,1))
plot(ipca)
plot(diff(log(ipcaindice)))
plot(seas_ipca)
ipca <- ipcadessaz
# Commodities
monthplot(comm)
seas_comm <- seas(x = comm)
summary(seas_comm)
seasonal::qs(seas_comm)
# Taxa de desemprego
desemprego
monthplot(desemprego)
seas_desemprego <- seas(x = desemprego)
summary(seas_desemprego)
seasonal::qs(seas_desemprego)
desempregodessaz <- series(seas_desemprego, "s11")
par(mfrow=c(2,1))
plot(desemprego)
plot(seas_desemprego)
desemprego <- desempregodessaz
par(mfrow=c(1,1))
# PIM-PF
pimpf
monthplot(pimpf)
seas_pimpf <- seas(x = pimpf)
summary(seas_pimpf)
seasonal::qs(seas_pimpf)
pimpfdessaz <- series(seas_pimpf, "s11")
par(mfrow=c(2,1))
plot(pimpf)
plot(seas_pimpf)
pimpf <- pimpfdessaz
par(mfrow=c(1,1))
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$##
#                                                                     #
#                     DADOS MENSAIS - 1999-2020                       #
#                                                                     #
#######################################################################
# Verificando tamanho dos dados (Deve ser igual a 242 obs)
length(ipcaindice)
length(ipca)
length(igp)
length(ipa)
length(ipca_alimbebs)
length(pimpf)
length(cambio)
length(comm)
length(capacidade)
length(desemprego)
# Exportando os dados
# Coluna de data
date = seq(from = as.Date("1999-07-01"), to = as.Date("2020-02-01"), by = 'month')
length(date)
# Criando a base de dados ####
dadosbrutos <- tibble(date,
ipca,
ipa,
igp,
capacidade,
desemprego, #10
comm,
cambio,
pimpf,
ipcaindice,
.name_repair = ~  c("date",
"ipca",
'ipa',
'igp',
"capacidade",
"desemprego",
"comm",
"cambio",
"pimpf",
"ipcaindice"))
#######################################################################
#                                                                     #
#                     DADOS TRIMESTRAIS                               #
#                                                                     #
#######################################################################
# PIB real trimestral
pib <- read_excel('Data/Analytic/pib_real.xlsx', col_names = c('data','pib'))
pib <- ts(pib[3:nrow(pib),2], start = c(1999,4), end = c(2019,4), frequency = 4)
pib
# Hiato do produto (IPEA)
pib_hiato <- read_excel('Data/Analytic/hiatodoproduto.xlsx', col_names = c('data','hiato'))
pib_hiato <- ts(pib_hiato[29:nrow(pib_hiato),2],  start = c(1999,4), end = c(2019,4), frequency = 4)
# Transformando em objetos xts e reajustando para que os trimestre comecem em outubro e terminem em dezembro de 2019 ####
ipca <- as.xts(ipca)[4:(length(ipca)-2)]
igp <- as.xts(igp)[4:(nrow(igp)-2)]
ipa <- as.xts(ipa)[4:(nrow(ipa)-2)]
cambio <- as.xts(cambio)[4:(nrow(cambio)-2)]
igp <- as.xts(igp)[4:(length(igp)-2)]
ipa <- as.xts(ipa)[4:(length(ipa)-2)]
cambio <- as.xts(cambio)[4:(length(cambio)-2)]
capacidade <- as.xts(capacidade)[4:(length(capacidade)-2)]
comm <- as.xts(comm)[4:(length(comm)-2)]
pimpf <- as.xts(pimpf)[4:(length(pimpf)-2)]
desemprego <- as.xts(desemprego)[4:(length(desemprego)-2)]
ipcaindice <- as.xts(ipcaindice)[4:(length(ipcaindice)-2)]
pib_hiato <- as.xts(pib_hiato)
pib <- as.xts(pib)
# Transformando em dados trimestrais
ipca_trim <- apply.quarterly(ipca, mean)
igp_trim <- apply.quarterly(igp, mean)
ipa_trim <- apply.quarterly(ipa, mean)
cambio_trim <- apply.quarterly(cambio, mean)
comm_trim <- apply.quarterly(comm, mean)
capacidade_trim <- apply.quarterly(capacidade, mean)
pimpf_trim <- apply.quarterly(pimpf, mean)
desemprego_trim <- apply.quarterly(desemprego, mean)
ipcaindice_trim <- apply.quarterly(ipcaindice, mean)
date_trim <- seq(from = as.Date("1999-10-01"), to = as.Date("2019-12-01"), by = 'quarter')
# Ajustando tamanho de obs (Retirar 3T/1999 e 1T/2020 por causa de possível quebra estrutural)
ipca_trim
# Verificando nº de obs
length(ipca_trim)
length(ipcaindice_trim)
length(capacidade_trim)
length(desemprego_trim)
length(comm_trim)
length(cambio_trim)
length(pib)
length(pib_hiato)
length(pimpf_trim)
length(ipa_trim)
length(igp_trim)
dadosbrutos_trim <- tibble(date_trim,
ipca_trim,
igp_trim,
ipa_trim,
tradables_trim,
nontradables_trim,
monitorados_trim,
capacidade_trim,
pib_trim,
desemprego_trim,
comm_trim,
cambio_trim[,1],
pimpf_trim,
lpimpf.hiato_trim,
ipcaindice_trim,
pib.hiato,
pibma7,
pib_real,
.name_repair = ~  c("date",
"ipca",
'igp',
'ipa',
'tradables',
'nontradables',
'monitorados',
"capacidade",
"pib_g",
"desemprego",
"comm",
"cambio",
"pimpf",
"lpimpf.hiato",
"ipcaindice",
"pib.hiato",
"pibma7",
'pib'))
dadosbrutos_trim <- tibble(date_trim,
ipca_trim,
igp_trim,
ipa_trim,
capacidade_trim,
pib,
desemprego_trim,
comm_trim,
cambio_trim,
pimpf_trim,
ipcaindice_trim,
pib_hiato,
.name_repair = ~  c("date",
"ipca",
'igp',
'ipa',
"capacidade",
"pib",
"desemprego",
"comm",
"cambio",
"pimpf",
"ipcaindice",
"pib.hiato"))
if ( (!exists("dadosbrutos")) && (!exists("dadosbrutos.trim")) )  {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Packages.R', echo=F, verbose = F)
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Cleaning_data.R', echo=F, verbose = F)
}
# Estabelecendo diretório padrão
#   (necessário pois é alterado futuramente para exportar gráficos em diretórios separados)
setwd('/home/luanmugarte/Artigos/Asym_ERPT/')
# Resgatando as variáveis do modelo
dadosbrutos.trim
dadosbrutos
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Cleaning_data.R', echo=F, verbose = F)
if ( (!exists("dadosbrutos")) && (!exists("dadosbrutos.trim")) )  {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Packages.R', echo=F, verbose = F)
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Cleaning_data.R', echo=F, verbose = F)
}
# Estabelecendo diretório padrão
#   (necessário pois é alterado futuramente para exportar gráficos em diretórios separados)
setwd('/home/luanmugarte/Artigos/Asym_ERPT/')
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Packages.R', verbose = F)
if ( (!exists("dadosbrutos")) && (!exists("dadosbrutos.trim")) )  {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Packages.R', verbose = F)
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Cleaning_data.R', verbose = F)
}
# Estabelecendo diretório padrão
#   (necessário pois é alterado futuramente para exportar gráficos em diretórios separados)
setwd('/home/luanmugarte/Artigos/Asym_ERPT/')
# Resgatando as variáveis do modelo
dadosbrutos.trim
dadosbrutos
if ( (!exists("dadosbrutos")) & (!exists("dadosbrutos.trim")) )  {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Packages.R', verbose = F)
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Cleaning_data.R', verbose = F)
}
# Estabelecendo diretório padrão
#   (necessário pois é alterado futuramente para exportar gráficos em diretórios separados)
setwd('/home/luanmugarte/Artigos/Asym_ERPT/')
# Resgatando as variáveis do modelo
dadosbrutos.trim
dadosbrutos
if ( (!exists("dadosbrutos")) & (!exists("dadosbrutos.trim")) )  {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Packages.R', verbose = F)
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Cleaning_data.R', verbose = F)
}
if ( (!exists("dadosbrutos")) & (!exists("dadosbrutos_trim")) )  {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Packages.R', verbose = F)
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Cleaning_data.R', verbose = F)
}
# Estabelecendo diretório padrão
#   (necessário pois é alterado futuramente para exportar gráficos em diretórios separados)
setwd('/home/luanmugarte/Artigos/Asym_ERPT/')
# Resgatando as variáveis do modelo
dadosbrutos_trim
dadosbrutos
if ( (!exists("dadosbrutos")) & (!exists("dadosbrutos_trim")) )  {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Packages.R', verbose = F)
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Cleaning_data.R', verbose = F)
}
# Estabelecendo diretório padrão
#   (necessário pois é alterado futuramente para exportar gráficos em diretórios separados)
setwd('/home/luanmugarte/Artigos/Asym_ERPT/')
# Resgatando as variáveis do modelo
dadosbrutos_trim
dadosbrutos
length(dadosbrutos)
# Comm exógeno ou endógeno
comm_endo = F
# Frequência (mensal ou trim)
modelo = 'mensal'
# Tendência (1) ou sem tendência (0)
model_trend = 0
# Efeito contemporâneo presente (1) ou ausente  (0) da variável exógena
contemp_effect = 0
# Variável de demanda agregada (capacidade, pib ou pimpf)
DA_variable = 'pimpf'
# Horizonte das LP's
hor_lps <- 18
# Gamma da função de transição
gamma_transition = 3
# Lags das variáveis endógenas
# Escolhido endogenamento pelo criterio HQ
lag_endog = 1
# Lags das variáveis exógenas
lag_exog = 2
# Configurações extras ####
# Condicional para a determinação da frequencia das variáveis
if (modelo == 'mensal'){
dados <- dadosbrutos
date <- seq(1999.77,2020.23,1/12)
lambda_hp = 14400
} else   {
dados <- dadosbrutos.trim
date <- seq(2000.26,2019.99,1/4)
lambda_hp = 1600
}
source('~/Artigos/Asym_ERPT/Code/Main_Model.R', echo=TRUE)
# Obtendo o objeto dos plots ####
nl_plots <- plot_nl(results_nl)
# Criando diretório para exportar gráficos
ifelse(!dir.exists(file.path('Output/Figures')),
dir.create(file.path('Output/Figures')),
FALSE)
# Configurações iniciais ####
if ( (!exists("dadosbrutos")) & (!exists("dadosbrutos_trim")) )  {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Packages.R', verbose = F)
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Cleaning_data.R', verbose = F)
}
# Estabelecendo diretório padrão
#   (necessário pois é alterado futuramente para exportar gráficos em diretórios separados)
setwd('/home/luanmugarte/Artigos/Asym_ERPT/')
# Resgatando as variáveis do modelo
dadosbrutos_trim
dadosbrutos
length(dadosbrutos)
# Configurações do modelo ####
# Comm exógeno ou endógeno
comm_endo = F
# Frequência (mensal ou trim)
modelo = 'mensal'
# Tendência (1) ou sem tendência (0)
model_trend = 0
# Efeito contemporâneo presente (1) ou ausente  (0) da variável exógena
contemp_effect = 0
# Variável de demanda agregada (capacidade, pib ou pimpf)
DA_variable = 'pimpf'
# Horizonte das LP's
hor_lps <- 18
# Gamma da função de transição
gamma_transition = 3
# Lags das variáveis endógenas
# Escolhido endogenamento pelo criterio HQ
lag_endog = 1
# Lags das variáveis exógenas
lag_exog = 2
# Estimação ####
# Configurações extras ####
# Condicional para a determinação da frequencia das variáveis
if (modelo == 'mensal'){
dados <- dadosbrutos
date <- seq(1999.77,2020.23,1/12)
lambda_hp = 14400
} else   {
dados <- dadosbrutos.trim
date <- seq(2000.26,2019.99,1/4)
lambda_hp = 1600
}
# Variável de comm para o caso de ser exógeno
comm_df <- dados %>%
dplyr::select(comm) %>%
mutate(across(everything(), ~ (as.numeric(.) - dplyr::lag(as.numeric(.)))/dplyr::lag(as.numeric(.)))) %>%
drop_na()
# Precisa ser dataframe para a função lp_nl
modelo_exog <- data.frame(comm_df)
modelo_exog
# Escolha das variáveis do modelo
if (comm_endo == T) {
modelo_endo <- dados %>%
dplyr::select(comm,cambio, DA_variable,desemprego,ipcaindice) %>%
mutate(desemprego = desemprego + 1) %>%
mutate(across(everything(), ~ (as.numeric(.) - dplyr::lag(as.numeric(.)))/dplyr::lag(as.numeric(.)))) %>%
drop_na()
modelo_endo
} else {
modelo_endo <- dados %>%
dplyr::select(cambio, DA_variable,desemprego,ipcaindice) %>%
mutate(desemprego = desemprego + 1) %>%
mutate(across(everything(), ~ (as.numeric(.) - dplyr::lag(as.numeric(.)))/dplyr::lag(as.numeric(.)))) %>%
drop_na()
}
# Definição dos choques e respostas
response <- grep('ipcaindice', colnames(modelo_endo))
cambio_shock <- grep('cambio', colnames(modelo_endo))
# Escolha das variáveis exógenas, caso exista
# OBS: é necessário ajustar a configuração na função de estimação
# Nome do Modelo para exportar figuras
# Primeira parte: variáveis exógenas
# Segunda parte: variáveis endógenas de demanda agregada
if (model_trend == 1){
name_trend = 'trend'
} else {
name_trend = 'notrend'
}
name_trend
if (contemp_effect == 1){
contemp_effect_lp = modelo_exog
contemp_effect = '_CE'
} else {
contemp_effect_lp = NULL
contemp_effect = ''
}
if (comm_endo == T) {
nome_modelo = paste0(toupper(modelo),
'_exo',
'[',
name_trend,
']_endo[',
DA_variable,
paste0('(',as.character(lag_endog),')]'),
paste0('_gamma[',as.character(gamma_transition),']')
)
} else {
nome_modelo = paste0(toupper(modelo),
'_exo',
contemp_effect,
'[',
'comm',
paste0('(',as.character(lag_exog),')_'),
name_trend,
']_endo[',
DA_variable,
paste0('(',as.character(lag_endog),')]'),
paste0('_gamma[',as.character(gamma_transition),']')
)
}
# Função lp_nl ####
# Seleção de defasagem ótima
VARselect(modelo_endo)
cambio_switching <- dados %>%
dplyr::select(cambio) %>%
slice(-1)
lag_endog <- VARselect(modelo_endo)$selection[2]
lag <- stats::lag
# Estimando as projeções locais
?lp_nl
## Parâmetros
if (comm_endo == T) {
results_nl <- lp_nl(
modelo_endo, # Variáveis endógenas
lags_endog_lin = lag_endog, # Lags do modelo
lags_endog_nl = lag_endog, # Lags do modelo
shock_type = 0, # Tipo de choques: no caso, 0 é de 1 desvio padrão
confint = 1.65, # Intervalo de confiança de 95%
use_nw = T, # Usar erros padrão de Newey-West para as respostas ao impulso (correção de viés)
hor = hor_lps, # Horizonte para as LP
switching = modelo_endo['cambio'], # Definição da série de transição
lag_switching = T, # Uso da variável de transição de forma defasada
use_hp = T, # Usar filtro de HP para decompor
lambda = lambda_hp, # Lambda para o filtro HP, 14400 é mensal
trend = model_trend, # Sem variável de tendência
gamma = gamma_transition, # Definição de gamma para a função de transição
contemp_data = NULL, # Variáveis exógenas com efeito contemporâneo
exog_data = NULL, # Variáveis exógenas com efeitos defasados
lags_exog = NULL # Lags das variáveis exógenas
)
} else {
results_nl <- lp_nl(
modelo_endo, # Variáveis endógenas
lags_endog_lin = lag_endog, # Lags do modelo
lags_endog_nl = lag_endog, # Lags do modelo
shock_type = 0, # Tipo de choques: no caso, 0 é de 1 desvio padrão
confint = 1.65, # Intervalo de confiança de 95%
use_nw = T, # Usar erros padrão de Newey-West para as respostas ao impulso (correção de viés)
hor = hor_lps, # Horizonte para as LP
switching = cambio_switching, # Definição da série de transição
lag_switching = T, # Uso da variável de transição de forma defasada
use_hp = T, # Usar filtro de HP para decompor
lambda = lambda_hp, # Lambda para o filtro HP, 14400 é mensal
trend = model_trend, # Sem variável de tendência
gamma = gamma_transition, # Definição de gamma para a função de transição
contemp_data = contemp_effect_lp, # Variáveis exógenas com efeito contemporâneo
exog_data = modelo_exog, # Variáveis exógenas com efeitos defasados
lags_exog = lag_exog # Lags das variáveis exógenas
)
}
#######################################################################
#                                                                     #
#                               GRÁFICOS                              #
#                                                                     #
#######################################################################
if (comm_endo == T) {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Graphs_5_variables.R', echo = F, verbose =F)
} else {
source('/home/luanmugarte/Artigos/Asym_ERPT/Code/Graphs_4_variables.R', verbose =F)
}
