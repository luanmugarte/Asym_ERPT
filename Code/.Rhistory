# Teste de Chow #
sctest(pimpf, type = 'Chow')
# Teste de Chow #
sctest(log(dados['pimpf'], type = 'Chow')
ccancercancel
# Teste de Chow #
sctest(log(dados['pimpf']), type = 'Chow')
pimpfctest -> log(dados['pimpf'])
pimpfctest <- log(dados['pimpf'])
pimpfctest
sctest(pimpfctest, type = 'Chow')
sctest(pimpfctest)
vignette("strucchange-intro", package = "strucchange")
pimpf.pp1 <- ur.pp(pimpf, type = 'Z-tau', model = c("constant","trend"), lags = 'long')
summary(pimpf.pp1)
# Primeira Etapa (Testando o modelo com tendência e drift)
pimpf.df1 <- ur.df(pimpf, type = 'trend', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
pimpf.kpss1 <- ur.kpss(pimpf, type = 'tau', lags = 'long')
summary(pimpf.kpss1)
plot(pimpf.kpss1)
# Segunda etapa
pimpf.kpss2 <- ur.kpss(pimpf, type = 'mu', lags = 'long')
summary(pimpf.kpss2)
# Primeira etapa
pimpf.kpss1 <- ur.kpss(pimpf, type = 'tau', lags = 'long')
summary(pimpf.kpss1)
plot(pimpf.kpss1)
# Primeira Etapa (Testando o modelo com tendência e drift)
pimpf.df1 <- ur.df(pimpf, type = 'trend', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
# Segunda etapa
pimpf.df1 <- ur.df(pimpf, type = 'drift', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
plot(pimpf.df1)
# Terceira etapa
pimpf.df1 <- ur.df(pimpf, type = 'trend', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
# Terceira etapa
pimpf.df1 <- ur.df(pimpf, type = 'none', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
# Primeira etapa
pimpf.kpss1 <- ur.kpss(pimpf, type = 'tau', lags = 'long')
summary(pimpf.kpss1)
plot(pimpf.kpss1)
pimpf.pp1 <- ur.pp(pimpf, type = 'Z-tau', model = c("constant","trend"), lags = 'long')
summary(pimpf.pp1)
ipca <- diff(ipca)
cambio <- diff(cambio)
plot(ipca)
acf(ipca)
pacf(ipca)
# Primeira Etapa (Testando o modelo com tendência e drift)
ipca.df1 <- ur.df(ipca, type = 'trend', lags=12, selectlags = 'AIC')
summary(ipca.df1)
# Carregando pacotes
library(AER)
library('readxl') # Carrega dados do excel
library('knitr') # Para Kable
library('stargazer') # Para tabelas comparativas
library('broom') # Para transformar lm em tibble
library('normtest') # Para testar normalidade dos res??duos
library('car') # Teste wald e fiv e estat??sticas robustas
library('lmtest') # teste resert e BP
library('ggplot2') # Para gráficos
library('dplyr') # Pipe operator
library('xts') # Objeto xts
library('dynlm') # Para dinamicos
library(sandwich)
library(strucchange)
library(urca)
library(FinTS)
library(gmm)
# Carregando os dados
dados <- read.csv("/home/luanmugarte/Dissertacao/Matlabcodes/dados/dadosbrutos.csv")
# Dividindo as séries
ipca <- ts(log(dados['ipca']), start = c(2002,02), frequency = 12)
cambio <- ts(log(dados['cambio']), start = c(2002,02), frequency = 12)
comm <- ts(log(dados['comm']), start = c(2002,02), frequency = 12)
pimpf <- ts(log(dados['pimpf']), start = c(2002,02), frequency = 12)
##### Testes de Estacionariedade ####
## IPCA ##
plot(ipca)
acf(ipca)
pacf(ipca)
# Teste ADF #
# Primeira Etapa (Testando o modelo com tendência e drift)
ipca.df1 <- ur.df(ipca, type = 'trend', lags=12, selectlags = 'AIC')
summary(ipca.df1)
plot(ipca.df1)
# Segunda etapa (Testando o modelo com drift)
ipca.df2 <- ur.df(ipca, type = 'drift', lags=12, selectlags = 'AIC')
summary(ipca.df2)
plot(ipca.df2)
# Terceira etapa (Testando modelo sem drift e sem tendência)
ipca.df3 <- ur.df(ipca, type = 'none', lags=12, selectlags = 'AIC')
summary(ipca.df3)
plot(ipca.df3)
# IPCA é não estacionário #
# Teste KPSS #
# Primeira Etapa (Testando o modelo com tendência e drift)
ipca.kpss1 <- ur.kpss(ipca, type = 'tau', lags = 'long')
summary(ipca.kpss1)
plot(ipca.kpss1)
# Não estacionário #
# Segunda etapa (Testando o modelo com drift)
ipca.kpss2 <- ur.kpss(ipca, type = 'mu', lags = 'long')
summary(ipca.kpss2)
plot(ipca.kpss2)
# Não rejeita hipótese nula. IPCA é estacionário. #
# Teste PP #
ipca.pp1 <- ur.pp(ipca, type = 'Z-tau', model = c("constant","trend"), lags = 'long')
summary(ipca.pp1)
plot(ipca.pp1)
# Teste PP #
ipca.pp2 <- ur.pp(ipca, type = 'Z-tau', model = c("constant"), lags = 'long')
summary(ipca.pp2)
plot(ipca.pp2)
### IPCA não é estacionário ###
## CAMBIO ##
plot(cambio)
acf(cambio)
pacf(cambio)
# Teste ADF #
# Primeira Etapa (Testando o modelo com tendência e drift)
cambio.df1 <- ur.df(cambio, type = 'trend', lags=12, selectlags = 'AIC')
summary(cambio.df1)
plot(cambio.df1)
# Segunda etapa (Testando o modelo com drift)
cambio.df2 <- ur.df(cambio, type = 'drift', lags=12, selectlags = 'AIC')
summary(cambio.df2)
plot(cambio.df2)
# Terceira etapa (Testando o modelo RW puro)
cambio.df3 <- ur.df(cambio, type = 'none', lags=12, selectlags = 'AIC')
summary(cambio.df3)
plot(cambio.df3)
### Não Estacionário ###
# Teste KPSS #
cambio.kpss1 <- ur.kpss(cambio, type = 'tau', lags = 'long')
summary(cambio.kpss1)
plot(cambio.kpss1)
# Rejeita hipótese nula. Não estacionário #
cambio.kpss2 <- ur.kpss(cambio, type = 'mu', lags = 'long')
summary(cambio.kpss2)
plot(cambio.kpss2)
# Não estacionário #
### Câmbio é não estacionário ###
# COMM #
## comm ##
plot(comm)
acf(comm)
pacf(comm)
# Teste ADF #
# Primeira Etapa (Testando o modelo com tendência e drift)
comm.df1 <- ur.df(comm, type = 'trend', lags=12, selectlags = 'AIC')
summary(comm.df1)
plot(comm.df1)
# Estacionário #
# Teste KPSS #
comm.kpss1 <- ur.kpss(comm, type = 'tau', lags = 'long')
summary(comm.kpss1)
plot(comm.kpss1)
# Não rejeita a hipótese nula. É estacionário #
# Teste PP #
comm.pp1 <- ur.pp(comm, type = 'Z-tau', model = c("constant","trend"), lags = 'long')
summary(comm.pp1)
plot(comm.pp1)
# Não rejeita a hipótese nula. É estacionário. #
### COMM é estacionário ###
# PIM-PF #
## pimpf ##
plot(pimpf)
acf(pimpf)
pacf(pimpf)
# Teste ADF #
# Primeira Etapa (Testando o modelo com tendência e drift)
pimpf.df1 <- ur.df(pimpf, type = 'trend', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
plot(pimpf.df1)
# Segunda etapa
pimpf.df1 <- ur.df(pimpf, type = 'drift', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
plot(pimpf.df1)
# Terceira etapa
pimpf.df1 <- ur.df(pimpf, type = 'none', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
plot(pimpf.df1)
# Não Estacionário #
# Teste KPSS #
# Primeira etapa
pimpf.kpss1 <- ur.kpss(pimpf, type = 'tau', lags = 'long')
summary(pimpf.kpss1)
plot(pimpf.kpss1)
# Não rejeita a hipótese nula. É estacionário #
# Teste PP #
pimpf.pp1 <- ur.pp(pimpf, type = 'Z-tau', model = c("constant","trend"), lags = 'long')
summary(pimpf.pp1)
plot(pimpf.pp1)
# Não rejeita a hipótese nula. É estacionário. #
### Pelos testes KPSS e PP, a série é estacionária ###
### Testes de Estacionariedade para séries diferenciadas ###
dipca <- diff(ipca)
dcambio <- diff(cambio)
## IPCA ##
plot(ipca)
acf(ipca)
pacf(ipca)
# Teste ADF #
# Primeira Etapa (Testando o modelo com tendência e drift)
ipca.df1 <- ur.df(ipca, type = 'trend', lags=12, selectlags = 'AIC')
summary(ipca.df1)
# Carregando pacotes
library(AER)
library('readxl') # Carrega dados do excel
library('knitr') # Para Kable
library('stargazer') # Para tabelas comparativas
library('broom') # Para transformar lm em tibble
library('normtest') # Para testar normalidade dos res??duos
library('car') # Teste wald e fiv e estat??sticas robustas
library('lmtest') # teste resert e BP
library('ggplot2') # Para gráficos
library('dplyr') # Pipe operator
library('xts') # Objeto xts
library('dynlm') # Para dinamicos
library(sandwich)
library(strucchange)
library(urca)
library(FinTS)
library(gmm)
# Carregando os dados
dados <- read.csv("/home/luanmugarte/Dissertacao/Matlabcodes/dados/dadosbrutos.csv")
# Dividindo as séries
ipca <- ts(log(dados['ipca']), start = c(2002,02), frequency = 12)
cambio <- ts(log(dados['cambio']), start = c(2002,02), frequency = 12)
comm <- ts(log(dados['comm']), start = c(2002,02), frequency = 12)
pimpf <- ts(log(dados['pimpf']), start = c(2002,02), frequency = 12)
##### Testes de Estacionariedade ####
## IPCA ##
plot(ipca)
acf(ipca)
pacf(ipca)
# Teste ADF #
# Primeira Etapa (Testando o modelo com tendência e drift)
ipca.df1 <- ur.df(ipca, type = 'trend', lags=12, selectlags = 'AIC')
summary(ipca.df1)
plot(ipca.df1)
# Segunda etapa (Testando o modelo com drift)
ipca.df2 <- ur.df(ipca, type = 'drift', lags=12, selectlags = 'AIC')
summary(ipca.df2)
plot(ipca.df2)
# Terceira etapa (Testando modelo sem drift e sem tendência)
ipca.df3 <- ur.df(ipca, type = 'none', lags=12, selectlags = 'AIC')
summary(ipca.df3)
plot(ipca.df3)
# IPCA é não estacionário #
# Teste KPSS #
# Primeira Etapa (Testando o modelo com tendência e drift)
ipca.kpss1 <- ur.kpss(ipca, type = 'tau', lags = 'long')
summary(ipca.kpss1)
plot(ipca.kpss1)
# Não estacionário #
# Segunda etapa (Testando o modelo com drift)
ipca.kpss2 <- ur.kpss(ipca, type = 'mu', lags = 'long')
summary(ipca.kpss2)
plot(ipca.kpss2)
# Não rejeita hipótese nula. IPCA é estacionário. #
# Teste PP #
ipca.pp1 <- ur.pp(ipca, type = 'Z-tau', model = c("constant","trend"), lags = 'long')
summary(ipca.pp1)
plot(ipca.pp1)
# Teste PP #
ipca.pp2 <- ur.pp(ipca, type = 'Z-tau', model = c("constant"), lags = 'long')
summary(ipca.pp2)
plot(ipca.pp2)
### IPCA não é estacionário ###
## CAMBIO ##
plot(cambio)
acf(cambio)
pacf(cambio)
# Teste ADF #
# Primeira Etapa (Testando o modelo com tendência e drift)
cambio.df1 <- ur.df(cambio, type = 'trend', lags=12, selectlags = 'AIC')
summary(cambio.df1)
plot(cambio.df1)
# Segunda etapa (Testando o modelo com drift)
cambio.df2 <- ur.df(cambio, type = 'drift', lags=12, selectlags = 'AIC')
summary(cambio.df2)
plot(cambio.df2)
# Terceira etapa (Testando o modelo RW puro)
cambio.df3 <- ur.df(cambio, type = 'none', lags=12, selectlags = 'AIC')
summary(cambio.df3)
plot(cambio.df3)
### Não Estacionário ###
# Teste KPSS #
cambio.kpss1 <- ur.kpss(cambio, type = 'tau', lags = 'long')
summary(cambio.kpss1)
plot(cambio.kpss1)
# Rejeita hipótese nula. Não estacionário #
cambio.kpss2 <- ur.kpss(cambio, type = 'mu', lags = 'long')
summary(cambio.kpss2)
plot(cambio.kpss2)
# Não estacionário #
### Câmbio é não estacionário ###
# COMM #
## comm ##
plot(comm)
acf(comm)
pacf(comm)
# Teste ADF #
# Primeira Etapa (Testando o modelo com tendência e drift)
comm.df1 <- ur.df(comm, type = 'trend', lags=12, selectlags = 'AIC')
summary(comm.df1)
plot(comm.df1)
# Estacionário #
# Teste KPSS #
comm.kpss1 <- ur.kpss(comm, type = 'tau', lags = 'long')
summary(comm.kpss1)
plot(comm.kpss1)
# Não rejeita a hipótese nula. É estacionário #
# Teste PP #
comm.pp1 <- ur.pp(comm, type = 'Z-tau', model = c("constant","trend"), lags = 'long')
summary(comm.pp1)
plot(comm.pp1)
# Não rejeita a hipótese nula. É estacionário. #
### COMM é estacionário ###
# PIM-PF #
## pimpf ##
plot(pimpf)
acf(pimpf)
pacf(pimpf)
# Teste ADF #
# Primeira Etapa (Testando o modelo com tendência e drift)
pimpf.df1 <- ur.df(pimpf, type = 'trend', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
plot(pimpf.df1)
# Segunda etapa
pimpf.df1 <- ur.df(pimpf, type = 'drift', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
plot(pimpf.df1)
# Terceira etapa
pimpf.df1 <- ur.df(pimpf, type = 'none', lags=12, selectlags = 'AIC')
summary(pimpf.df1)
plot(pimpf.df1)
# Não Estacionário #
# Teste KPSS #
# Primeira etapa
pimpf.kpss1 <- ur.kpss(pimpf, type = 'tau', lags = 'long')
summary(pimpf.kpss1)
plot(pimpf.kpss1)
# Não rejeita a hipótese nula. É estacionário #
# Teste PP #
pimpf.pp1 <- ur.pp(pimpf, type = 'Z-tau', model = c("constant","trend"), lags = 'long')
summary(pimpf.pp1)
plot(pimpf.pp1)
# Não rejeita a hipótese nula. É estacionário. #
### Pelos testes KPSS e PP, a série é estacionária ###
### Testes de Estacionariedade para séries diferenciadas ###
dipca <- diff(ipca)
dcambio <- diff(cambio)
plot(ipca)
acf(ipca)
plot(dipca)
acf(dipca)
pacf(dipca)
# Primeira Etapa (Testando o modelo com tendência e drift)
ipca.df1 <- ur.df(dipca, type = 'trend', lags=12, selectlags = 'AIC')
summary(dipca.df1)
plot(dipca.df1)
# Primeira Etapa (Testando o modelo com tendência e drift)
dipca.df1 <- ur.df(dipca, type = 'trend', lags=12, selectlags = 'AIC')
summary(dipca.df1)
# Primeira Etapa (Testando o modelo com tendência e drift)
dipca.kpss1 <- ur.kpss(dipca, type = 'tau', lags = 'long')
summary(dipca.kpss1)
# Teste PP #
dipca.pp1 <- ur.pp(dipca, type = 'Z-tau', model = c("constant","trend"), lags = 'long')
summary(dipca.pp1)
plot(dcambio)
acf(dcambio)
pacf(dcambio)
# Primeira Etapa (Testando o modelo com tendência e drift)
dcambio.df1 <- ur.df(dcambio, type = 'trend', lags=12, selectlags = 'AIC')
summary(dcambio.df1)
dcambio.kpss1 <- ur.kpss(dcambio, type = 'tau', lags = 'long')
summary(dcambio.kpss1)
comm <- comm[2:]
comm
comm <- comm[2:,;]
comm <- comm[2:,:]
comm <- comm[2:,:]
comm <- comm[2:]
comm[2]
comm[2:4]
comm[2:end]
comm[2:]
comm[,2:]
comm[,2]
comm[-1]
comm
comm <- ts(comm[-1], start = c(2002,03), frequency = 12)
pimfpf <- ts(pimpf[-1], start = c(2002,03), frequency = 12)
dadoslimpos <- data.frame(c[dipca,dcambio,comm,pimpf])
dadoslimpos <- data.frame(c(dipca,dcambio,comm,pimpf))
dadoslimpos
dadoslimpos <- tibble(c(dipca,dcambio,comm,pimpf))
dadoslimpos
dadoslimpos <- tibble(dipca,dcambio,comm,pimpf)
comm <- ts(comm[-1], start = c(2002,03), frequency = 12)
pimpf <- ts(pimpf[-1], start = c(2002,03), frequency = 12)
dadoslimpos <- tibble(dipca,dcambio,comm,pimpf)
comm <- ts(comm[-1], start = c(2002,03), frequency = 12)
pimpf <- ts(pimpf[-1], start = c(2002,03), frequency = 12)
dadoslimpos <- data.frame(c(dipca,dcambio,comm,pimpf))
dadoslimpos
dadoslimpos <- tibble( x = c(dipca,dcambio,comm,pimpf))
dadoslimpos
dadoslimpos <- tibble( x = (dipca,dcambio,comm,pimpf))
dadoslimpos <- tibble( x = [dipca,dcambio,comm,pimpf])
dadoslimpos <- c(dipca,dcambio,comm,pimpf)
dadoslimpos
dadoslimpos <- ts(dipca,dcambio,comm,pimpf)
dadoslimpos <- xts(dipca,dcambio,comm,pimpf)
dadoslimpos <- xts(c(dipca,dcambio,comm,pimpf), start = c(2002,03), frequency = 12)
dadoslimpos
c(dipca,dcambio,comm,pimpf)
write.csv(c(dipca,dcambio,comm,pimpf))
dadoslimpos <- tibble(c(dipca,dcambio,comm,pimpf), start = c(2002,03), frequency = 12)
comm
pimpf
dipca
dcambio
comm
comm <- ts(log(dados['comm']), start = c(2002,02), frequency = 12)
comm
pimpf
dipca
dcambio
comm
pimpf
dipca
pimpf
ipca <- ts(log(dados['ipca']), start = c(2002,02), frequency = 12)
cambio <- ts(log(dados['cambio']), start = c(2002,02), frequency = 12)
comm <- ts(log(dados['comm']), start = c(2002,02), frequency = 12)
pimpf <- ts(log(dados['pimpf']), start = c(2002,02), frequency = 12)
comm
pimpf
dipca
dcambio
tidy(comm)
as_tibble(comm)
as_tibble(comm) + as_tibble(pimpf)
tribble(c(pimpf,comm))
tibble(comm, pimpf, dipca, dcambio)
comm
pimpf
dipca
dcambio
comm <- ts(comm[-1], start = c(2002,03), frequency = 12)
pimpf <- ts(pimpf[-1], start = c(2002,03), frequency = 12)
comm
pimpf
dipca
dcambio
tibble(comm, pimpf, dipca, dcambio)
dadoslimpos <- dadoslimpos %>%
select(everything()) %>%
rename(c('comm','pimpf','ipca','cambio'))
dadoslimpos <- dadoslimpos %>%
select(dipca[,"ipca"],dcambio[,"cambio"]) %>%
rename("ipca" = dipca[,"ipca"], 'cambio' = dcambio[,"cambio"])
dadoslimpos <- dadoslimpos %>%
select(dipca[,"ipca"],dcambio[,"cambio"]) %>%
rename("ipca" = dipca[,"ipca"], 'cambio' = dcambio[,"cambio"])
dadoslimpos <- dadoslimpos %>%
select("dipca[,ipca]","dcambio[,cambio]) %>%
rename("ipca" = dipca[,"ipca"], 'cambio' = dcambio[,"cambio"])
dadoslimpos <- dadoslimpos %>%
select("dipca[,ipca]","dcambio[,cambio]") %>%
rename("ipca" = dipca[,"ipca"], 'cambio' = dcambio[,"cambio"])
dadoslimpos <- dadoslimpos %>%
select(everything()) %>%
rename("comm" = comm, "pimpf" = pimpf, "ipca" = dipca[,"ipca"], 'cambio' = dcambio[,"cambio"])
comm
pimpf
dipca
dcambio
dadoslimpos <- tibble(comm, pimpf, dipca, dcambio)
dadoslimpos
dadoslimpos <- dadoslimpos %>%
select() %>%
rename("comm" = comm, "pimpf" = pimpf, "ipca" = dipca[,"ipca"], 'cambio' = dcambio[,"cambio"])
dadoslimpos <- dadoslimpos %>%
rename("comm" = comm, "pimpf" = pimpf, "ipca" = dipca[,"ipca"], 'cambio' = dcambio[,"cambio"])
dadoslimpos <- dadoslimpos %>%
rename("comm","pimpf", "ipca" ,'cambio')
library(purrr)
dadoslimpos <- dadoslimpos %>%
set_names("comm","pimpf", "ipca" ,'cambio')
dadoslimpos
colnames(dadoslimpos)
source('~/Dissertacao/R/ScriptR.R', echo=TRUE)
write.csv(dadoslimpos, file = '/home/luanmugarte/dadoslimpos.csv')
write.csv(dadoslimpos, file = '/home/luanmugarte/dadoslimpos.csv', row.names = F)
write.csv(dadoslimpos, file = '/home/luanmugarte/Dissertacao/Matlabcodes/STVAR/code_and_data/dadoslimpos.csv', row.names = F)
devtools::install_github("yukai-yang/PSTR")
library(urca)
library(FinTS)
source('~/Dissertacao/R/PSTR.R', echo=TRUE)
source('~/Dissertacao/R/PSTR.R', echo=TRUE)
version(PSTR)
source('~/Dissertacao/Scripts/NLP_estimacao.R', echo=TRUE)
